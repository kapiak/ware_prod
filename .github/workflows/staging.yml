name: Build and Deploy Staging Environment

on:
  push:
    branches:
      - master

env:
  REPO: "mrb101"
  IMAGE: "safely"
  GOOGLECLOUD_PROJECT: ${{ secrets.GOOGLECLOUD_PROJECT }}
  REGISTRY_HOSTNAME: docker.pkg.github.com
  GITHUB_SHA: ${{ github.sha }}
  DJANGO_SETTINGS_MODULE: ${{ secrets.DJANGO_SETTINGS_MODULE }}
  DJANGO_SECRET_KEY: ${{ secrets.SECRET_KEY }}
  SECRET_KEY: ${{ secrets.SECRET_KEY }}
  DJANGO_ADMIN_URL: ${{ secrets.DJANGO_ADMIN_URL }}
  DJANGO_ALLOWED_HOSTS: ${{ secrets.DJANGO_ALLOWED_HOSTS }}
  DJANGO_SECURE_SSL_REDIRECT: ${{ secrets.DJANGO_SECURE_SSL_REDIRECT }}
  DJANGO_SERVER_EMAIL: ${{ secrets.DJANGO_SERVER_EMAIL }}
  SENDGRID_API_KEY: ${{ secrets.SENDGRID_API_KEY }}
  SENDGRID_GENERATE_MESSAGE_ID: ${{ secrets.SENDGRID_GENERATE_MESSAGE_ID }}
  SENDGRID_MERGE_FIELD_FORMAT: ${{ secrets.SENDGRID_MERGE_FIELD_FORMAT }}
  DJANGO_AWS_ACCESS_KEY_ID: ${{ secrets.DJANGO_AWS_ACCESS_KEY_ID }}
  DJANGO_AWS_SECRET_ACCESS_KEY: ${{ secrets.DJANGO_AWS_SECRET_ACCESS_KEY }}
  DJANGO_AWS_STORAGE_BUCKET_NAME: ${{ secrets.DJANGO_AWS_STORAGE_BUCKET_NAME }}
  DJANGO_AWS_S3_REGION_NAME: ${{ secrets.DJANGO_AWS_REGION_NAME }}
  DJANGO_ACCOUNT_ALLOW_REGISTRATION: ${{ secrets.DJANGO_ACCOUNT_ALLOW_REGISTRATION }}
  WEB_CONCURRENCY: ${{ secrets.WEB_CONCURRENCY }}
  SENTRY_DSN: ${{ secrets.SENTRY_DSN }}
  CELERY_FLOWER_USER: ${{ secrets.CELERY_FLOWER_USER }}
  CELERY_FLOWER_PASSWORD: ${{ secrets.CELERY_FLOWER_PASSWORD }}
  STAGING_DATABASE_URL: ${{ secrets.STAGING_DATABASE_URL }}
  STAGING_REDIS_URL: ${{ secrets.STAGING_REDIS_URL }}
  STAGING_CELERY_BROKER_URL: ${{ secrets.STAGING_CELERY_BROKER_URL }}
  STAGING_REDIS_HOSTNAME: ${{ secrets.STAGING_REDIS_HOSTNAME }}
  STAGING_POSTGRES_USER: ${{ secrets.STAGING_POSTGRES_USER }}
  STAGING_POSTGRES_PASSWORD: ${{ secrets.STAGING_POSTGRES_PASSWORD }}
  STAGING_POSTGRES_HOST: ${{ secrets.STAGING_POSTGRES_HOST }}
  STAGING_POSTGRES_PORT: ${{ secrets.STAGING_POSTGRES_PORT }}
  STAGING_POSTGRES_DB: ${{ secrets.STAGING_POSTGRES_DB }}
  SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
  GITHUB_RUNNER_TOKEN: ${{ secrets.RUNNER_TOKEN }}

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - uses: act10ns/slack@v1
        with:
          status: starting
        if: always()

      - name: checkout
        uses: actions/checkout@v2

      # Build the Docker image
      - name: Build Django
        run: |
          docker build \
            --tag "$REGISTRY_HOSTNAME"/"$REPO"/"$IMAGE"/app:"$GITHUB_SHA" \
            --file compose/production/django/Dockerfile \
            "."

      - name: Build AWS
        run: |
          docker build \
            --tag "$REGISTRY_HOSTNAME"/"$REPO"/"$IMAGE"/aws:latest \
            --file compose/production/aws/Dockerfile \
            "."

      - name: Build Traefik
        run: |
          docker build \
            --tag "$REGISTRY_HOSTNAME"/"$REPO"/"$IMAGE"/traefik:latest \
            --file compose/production/traefik/Dockerfile \
            "."

      # Push the Docker image to Google Container Registry
      - name: Publish Images
        run: |
          echo ${GITHUB_RUNNER_TOKEN} | docker login docker.pkg.github.com -u mrb101 --password-stdin
          docker push $REGISTRY_HOSTNAME/$REPO/$IMAGE/app:$GITHUB_SHA
          docker push $REGISTRY_HOSTNAME/$REPO/$IMAGE/aws:latest
          docker push $REGISTRY_HOSTNAME/$REPO/$IMAGE/traefik:latest

  deploy:
    runs-on: [self-hosted, aws-staging]
    needs: build
    steps:
      - name: Run Migrations
        run: |
          docker-compose -f production.yml run --rm django python manage.py migrate

      - name: Create superuser
        run: |
          docker-compose -f production.yml run --rm django python manage.py superuser

      - name: Stop all running container
        run: |
          docker stop $(docker ps -aq) || true

      - name: Remove all containers
        run: |
          docker rm $(docker ps -aq) || true

      - name: Docker prune
        run: |
          docker system prune --force
          docker container prune --force

      - name: Remove all images
        run: |
          docker rmi $(docker images -q) --force || true

      - name: Deploy Staging
        run: |
          docker-compose -f production.yml up -d

      - uses: act10ns/slack@v1
        with:
          status: ${{ job.status }}
          steps: ${{ toJson(steps) }}
        if: always()
